# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psmove', [dirname(__file__)])
        except ImportError:
            import _psmove
            return _psmove
        if fp is not None:
            try:
                _mod = imp.load_module('_psmove', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psmove = swig_import_helper()
    del swig_import_helper
else:
    import _psmove
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


Conn_Bluetooth = _psmove.Conn_Bluetooth
Conn_USB = _psmove.Conn_USB
Conn_Unknown = _psmove.Conn_Unknown
Btn_L2 = _psmove.Btn_L2
Btn_R2 = _psmove.Btn_R2
Btn_L1 = _psmove.Btn_L1
Btn_R1 = _psmove.Btn_R1
Btn_TRIANGLE = _psmove.Btn_TRIANGLE
Btn_CIRCLE = _psmove.Btn_CIRCLE
Btn_CROSS = _psmove.Btn_CROSS
Btn_SQUARE = _psmove.Btn_SQUARE
Btn_SELECT = _psmove.Btn_SELECT
Btn_L3 = _psmove.Btn_L3
Btn_R3 = _psmove.Btn_R3
Btn_START = _psmove.Btn_START
Btn_UP = _psmove.Btn_UP
Btn_RIGHT = _psmove.Btn_RIGHT
Btn_DOWN = _psmove.Btn_DOWN
Btn_LEFT = _psmove.Btn_LEFT
Btn_PS = _psmove.Btn_PS
Btn_MOVE = _psmove.Btn_MOVE
Btn_T = _psmove.Btn_T
Batt_MIN = _psmove.Batt_MIN
Batt_MAX = _psmove.Batt_MAX
Batt_CHARGING = _psmove.Batt_CHARGING

def psmove_count_connected():
  return _psmove.psmove_count_connected()
psmove_count_connected = _psmove.psmove_count_connected

def psmove_connect_by_id(*args):
  return _psmove.psmove_connect_by_id(*args)
psmove_connect_by_id = _psmove.psmove_connect_by_id

def psmove_connect():
  return _psmove.psmove_connect()
psmove_connect = _psmove.psmove_connect

def psmove_connection_type(*args):
  return _psmove.psmove_connection_type(*args)
psmove_connection_type = _psmove.psmove_connection_type

def psmove_btaddr_from_string(*args):
  return _psmove.psmove_btaddr_from_string(*args)
psmove_btaddr_from_string = _psmove.psmove_btaddr_from_string

def psmove_get_btaddr(*args):
  return _psmove.psmove_get_btaddr(*args)
psmove_get_btaddr = _psmove.psmove_get_btaddr

def psmove_controller_btaddr(*args):
  return _psmove.psmove_controller_btaddr(*args)
psmove_controller_btaddr = _psmove.psmove_controller_btaddr

def psmove_set_btaddr(*args):
  return _psmove.psmove_set_btaddr(*args)
psmove_set_btaddr = _psmove.psmove_set_btaddr

def psmove_pair(*args):
  return _psmove.psmove_pair(*args)
psmove_pair = _psmove.psmove_pair

def psmove_pair_custom(*args):
  return _psmove.psmove_pair_custom(*args)
psmove_pair_custom = _psmove.psmove_pair_custom

def psmove_set_leds(*args):
  return _psmove.psmove_set_leds(*args)
psmove_set_leds = _psmove.psmove_set_leds

def psmove_set_rumble(*args):
  return _psmove.psmove_set_rumble(*args)
psmove_set_rumble = _psmove.psmove_set_rumble

def psmove_update_leds(*args):
  return _psmove.psmove_update_leds(*args)
psmove_update_leds = _psmove.psmove_update_leds

def psmove_poll(*args):
  return _psmove.psmove_poll(*args)
psmove_poll = _psmove.psmove_poll

def psmove_get_buttons(*args):
  return _psmove.psmove_get_buttons(*args)
psmove_get_buttons = _psmove.psmove_get_buttons

def psmove_get_battery(*args):
  return _psmove.psmove_get_battery(*args)
psmove_get_battery = _psmove.psmove_get_battery

def psmove_get_temperature(*args):
  return _psmove.psmove_get_temperature(*args)
psmove_get_temperature = _psmove.psmove_get_temperature

def psmove_get_trigger(*args):
  return _psmove.psmove_get_trigger(*args)
psmove_get_trigger = _psmove.psmove_get_trigger

def psmove_get_accelerometer(*args):
  return _psmove.psmove_get_accelerometer(*args)
psmove_get_accelerometer = _psmove.psmove_get_accelerometer

def psmove_get_gyroscope(*args):
  return _psmove.psmove_get_gyroscope(*args)
psmove_get_gyroscope = _psmove.psmove_get_gyroscope

def psmove_get_magnetometer(*args):
  return _psmove.psmove_get_magnetometer(*args)
psmove_get_magnetometer = _psmove.psmove_get_magnetometer

def psmove_disconnect(*args):
  return _psmove.psmove_disconnect(*args)
psmove_disconnect = _psmove.psmove_disconnect
class PSMove(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMove, name)
    __repr__ = _swig_repr
    __swig_getmethods__["connection_type"] = _psmove.PSMove_connection_type_get
    if _newclass:connection_type = _swig_property(_psmove.PSMove_connection_type_get)
    __swig_getmethods__["ax"] = _psmove.PSMove_ax_get
    if _newclass:ax = _swig_property(_psmove.PSMove_ax_get)
    __swig_getmethods__["ay"] = _psmove.PSMove_ay_get
    if _newclass:ay = _swig_property(_psmove.PSMove_ay_get)
    __swig_getmethods__["az"] = _psmove.PSMove_az_get
    if _newclass:az = _swig_property(_psmove.PSMove_az_get)
    __swig_getmethods__["gx"] = _psmove.PSMove_gx_get
    if _newclass:gx = _swig_property(_psmove.PSMove_gx_get)
    __swig_getmethods__["gy"] = _psmove.PSMove_gy_get
    if _newclass:gy = _swig_property(_psmove.PSMove_gy_get)
    __swig_getmethods__["gz"] = _psmove.PSMove_gz_get
    if _newclass:gz = _swig_property(_psmove.PSMove_gz_get)
    __swig_getmethods__["mx"] = _psmove.PSMove_mx_get
    if _newclass:mx = _swig_property(_psmove.PSMove_mx_get)
    __swig_getmethods__["my"] = _psmove.PSMove_my_get
    if _newclass:my = _swig_property(_psmove.PSMove_my_get)
    __swig_getmethods__["mz"] = _psmove.PSMove_mz_get
    if _newclass:mz = _swig_property(_psmove.PSMove_mz_get)
    def __init__(self, id = 0): 
        this = _psmove.new_PSMove(id)
        try: self.this.append(this)
        except: self.this = this
    def set_leds(self, *args): return _psmove.PSMove_set_leds(self, *args)
    def set_rumble(self, *args): return _psmove.PSMove_set_rumble(self, *args)
    def update_leds(self): return _psmove.PSMove_update_leds(self)
    def pair(self): return _psmove.PSMove_pair(self)
    def pair_custom(self, *args): return _psmove.PSMove_pair_custom(self, *args)
    def poll(self): return _psmove.PSMove_poll(self)
    def get_buttons(self): return _psmove.PSMove_get_buttons(self)
    def get_battery(self): return _psmove.PSMove_get_battery(self)
    def get_temperature(self): return _psmove.PSMove_get_temperature(self)
    def get_trigger(self): return _psmove.PSMove_get_trigger(self)
    __swig_destroy__ = _psmove.delete_PSMove
    __del__ = lambda self : None;
PSMove_swigregister = _psmove.PSMove_swigregister
PSMove_swigregister(PSMove)


def count_connected():
  return _psmove.count_connected()
count_connected = _psmove.count_connected


